created: 20180827105000274
modified: 20180827105923901
tags: 
title: MVCC
type: text/vnd.tiddlywiki

!! Context

The concurrency control method is about how to serialize transactions or deal with conflicting transactions. As a transaction executor, it might want to take two approaches:

* Avoid any conflict by sorting transactions to be executed one by one.
* Allow conflicts to occur, but when that happens  it only allows one of them to be executed.

[[2PL]] takes the former one, aka, pessimistic locking, and MVCC takes the latter one, aka, optimistic locking.

!! Overview

MVCC or Multi-Version Concurrency Control has various different implementations. However, they have same desire:

* Readers don't block writers.
* Writers don't block readers.

MVCC is just like its name - it maintains multi versions of data in-between transactions. Each transaction sees a snapshot version of data from their own perspective.

!! Solutions

* InnoDB stores multi-versioning information in the tablespace called `rollback segment` and three mvcc-related fields `DB_TRX_ID`, `DB_ROLL_PTR`, and `DB_ROW_ID` to each row. InnoDB implements MVCC by capturing old versions of changed rows in undo log so that it can rollback to a designated old version of data.
* PostgreSQL stores all multi-versioning information in the table data structure and two additional columns `t_min` and `t_max` to each row. PostgreSQL uses a technology called SSI or Serializable Snapshot Isolation.

!! References

* [[InnoDB Multi-Versioning|https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html]]
* [[PostgreSQL MVCC Intro|https://www.postgresql.org/docs/9.5/static/mvcc-intro.html]]
* [[How does mvcc work|https://vladmihalcea.com/how-does-mvcc-multi-version-concurrency-control-work/]]