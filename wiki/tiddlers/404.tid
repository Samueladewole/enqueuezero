created: 20180607095220103
modified: 20180714113136575
tags: 
title: 404
type: text/vnd.tiddlywiki

Hey! You're here! Welcome to the Enqueue Zero. Glad to see you on this page but unfortunately this page is not yet completed.

My name is Ju and I publish code principles here.  If you think

* Enqueue Zero posts are useful to me and want to see more similar posts.
* This guy is crazy. I like his posts.
* Writing these posts worth rewards.

Don't hesitate to join  ❤❤❤Enqueue Zero Community ❤❤❤ - [[Queue.enqueue(you)|https://www.patreon.com/bePatron?c=1762267]].

Either way, THANKS A MILLION!!! Below is a guide tour of Enqueue Zero.

---

We write code. We type commands. And we find patterns so that we can write less code and type less commands. This is why we need code principles.

We might learn several programming languages through our entire life, [[C|c]], [[C++|c-plus-plus]], [[Java|java\\, [[Python|python]], [[Ruby|ruby]], [[Perl|perl]], [[Bash|bash]], [[JavaScript|javascript]], [[Closure|closure]], [[Haskell|haskell]], [[Golang|golang]], [[Rust|rust]], [[Erlang|erlang]], [[Scala|scala]]. You name it. Some people even learn one language every year. Under the hood, these languages can be categorized into [[Compiled Language|compiled-language]] and [[Interpreter Language|interpreter-language]]. Knowing [[Programming Language Patterns|programming-language-patterns]] can help you learn other languages faster. In many cases, you just write a new language inside a language, or so-called [[Domain Specific Language|dsl]], so you will need to learn things like [[Language-Grammar|language-grammar]], [[Just-in-time|jit]] etc. 

Other than Programming Languages, knowing a few important protocols helps you understand things more easily, for example, [[HTTP|http]], [[DNS|dns]], [[TCP/IP|tcp-ip]], [[UDP|udp]], [[WebSocket|websocket]], [[Rack|rack]], [[WSGI|wsgi]], [[VRRP|vrrp]], [[Thrift|thrift]], [[Proto Buffer|protobuf]], etc. Based on these protocols, relevant [[Client-Server|client-server]] technology keeps Internet thriving ever since. 

In Server Side, you usually store data in [[Relational Database|relational-database]], [[NoSQL|nosql]], [[In-Memory Database|in-memoy-database]], [[Document Database|document-database]], [[Graph Database|graph-database]] and [[Time Series Database|time-series-database]], remember hot data in [[Cache|cache]] for better performance, enable searching keywords by [[Search Engine|search-engine]], asynchronously distribute [[Time Consuming Jobs|time-consuming-jobs]] to [[Job Queue|job-queue]] through [[Message Queue|message-queue]], and periodically run [[Batch Processing|batch-processing]] in the background, send static files in [[Content Delivery Network|cdn]]. [[Container|container]] is emerging, and so are [[Container Orchestration]], [[Service Discovery|service-discovery]]. Specialized application do special things, [[Authentication System|authentication-system]], [[Crawler System|crawler-system]], [[Payment System|payment-system]], [[Content Management System|cms]] are common but I bet some nontrivial system can create value to our human being. A well designed web application might follow [[12 Factor|12-factor]], or [[Event Sourcing|event-sourcing]], or [[Reactive Manifesto|reactive-manifesto]], and runs in infrastructure managed by [[Immutable Infrastructure|immutable-infrastructure]] & [[Infrastructure as code|infrastructure-as-code]]. Some application might run on [[Bare Metal|bare-metal]], some on [[Cloud Computing|cloud-computing]], some even on [[Serverless|serverless]]. In big company they even build entire [[Data Center]] and possibly mix using with cloud platform. Single instance brings [[Single point of failure|spof]] and hence we make it distributed - [[Distributed Database|distributed-database]], [[Distributed Service|distributed-service]], [[Distributed Tracing System|distributed-tracing-system]], and last but not least, [[Load Balance]]. Phew, sounds like a lot of coding and components?! What if a component is down? That means we need to introduce [[Redundancy|redundancy]], [[Circuit Breaker|circuit-breaker]], [[Back pressure|back-pressure]]. These are all for keeping site 24x7, and fulfilling [[Service Level Agreement|sla]], which is the goal of [[Site Reliability Engineering|site-reliability-engineering]]. Not to mention things are constantly changing, will our system still meet [[Reliability|reliability]], [[Scalability|scalability]], and [[Maintainability|maintainability]] requirements? Maybe [[Chaos Engineering|chaos-engineering]] can help us. [[Canary Deployment|canary-deployment]] counts as well. [[Fault Tolerant|fault-tolerant]] is not meant for all kinds of failures. When system become abnormal, [[Observability|observability]] is important. It means you need [[Health Check|health-check]], collect [[Metrics|metrics]] by [[Monitoring System|monitoring-system]], and drill down the system to get insight on [[System Performance|system-performance]]. Generally [[Latency and throughput|latency-and-throughput]] is good metric to determine if system is good or not. When some bad things really happens, do [[Disaster Recovery]]. Either way, it requires [[Operation|operation]] and [[Incident Management|incident-management]].

Enough distributed system, single machine has a lot of learn as well! You will need to understand basic Unix thing, like [[POSIX|posix]], [[User and Group|user-and-group]], [[Signals|signals]], [[File I/O|file-io]], [[File System|file-system]], [[I/O Model|io-model]], [[Process|process]], [[Job Control|job-control]], [[Shell|shell]], [[Thread|thread]], [[Daemon|daemon]], [[IPC|ipc]], [[Network IPC]], etc. For the system tools, [[Source Version Control|source-version-control]], and [[Text Editors|text-editors]] might be something you will operate in daily basis. [[SSH|ssh]] might be another one considering you will possibly have at least one host in remote. Your application might build from [[Web Framework|web-framework]] and writing in [[Model-View-Controller|mvc]] style. [[ORM|orm]] help you dealing with database interaction. I bet you know [[URL Dispatcher|url-dispatcher]] and [[Template|template]], don't you? [[Web Gateway Interface]] connects your application to [[Web Server|web-server]]. When handling [[Concurrency|concurrency]], your code might be in [[Asynchronous-and-Synchronous|async-and-sync]] or [[Event Driven|event-driven]] style. When interacting with other application, your code might be in [[Monolithic and Microservices]] style.  [[Logging|logging]], [[Error Tracing|error-tracing]], [[Packaging|packaging]], [[Testing|testing]] are essential.