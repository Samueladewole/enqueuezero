created: 20180606222008481
modified: 20180606222022312
title: task-queue
type: text/vnd.tiddlywiki

!! Context

A reactive system needs to respond quickly, for example, less than 500 ms or 1 seconds. However, it's inevitable that some jobs needs a longer time to be completed. It's unlikely to predict the actual run time, which varies from a few seconds to hours. It's a tough challenge on keeping system responsive but at the same time complete the time-consuming jobs. It's impossible to do this unless we change the process.

There are at least three solutions:

* Slice the job into chunk of small fractions, each one of which can be completed responsively.
** For example, deleting all user's comment might need to take a while, but we can do it by keep calling `get_user_comments` and `delete_user_comment`. Each one of them should be handled very easily.
** Advantages: No need to modify anything on system.
** Disadvantages: Limited use case. Many jobs are transactional and thus can't be sliced.
* Allocate results by pre-executing jobs ahead of when it needs. The actual job execution might be a simple reference association.
** For example, a ticket selling application, instead of enquiring to upstream supplier every time, might want to obtain tickets before selling. And the actual selling ticket is simply associate user id with an pre-allocated ticket.
** Advantages: Little modification on system.
** Disadvantages: Limited use case. It requires extra cost and potential over-executed jobs.
* Run the job in the background and respond job reference instead of the job result. User can enquiry job status and job result or get notified.
** For example, a ticket selling application, might also want to respond to user `we are handling your case, the application number is XXX.` after he/she clicking the buy button. User gets email notification on either successfully acquired or failed get one.
** Advantages: Very general solution and many frameworks support it well.
** Disadvantages: Make the system complicated and introduce more operation work.

In the rest, we will discuss the third solution, which is usually implemented using Task Queue framework.

