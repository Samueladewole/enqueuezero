created: 20180724103950285
modified: 20180727114850000
title: container
type: text/vnd.tiddlywiki

Many people have heard of the container for a while or even use it every day. However, a question like "what is container" or "how container works" might still rise.

In this post, we will deep dive into the container.

!! Context

!! Solutions

!!! Docker

Docker is the dominant container technology in the industry. Check [[Docker Overview|https://docs.docker.com/engine/docker-overview/]] for more information.

!!! CoreOS rkt

CoreOS rkt is yet another application container engine. The advantage of rkt is its cloud-native nature. Check [[A security-minded, standards-based container engine: rkt|https://coreos.com/rkt/]].

!!! LXC, LXD

LXC and LXD is system container engine.  It offers an environment as close as possible as the one you'd get from a VM but without the overhead that comes with running a separate kernel and simulating all the hardware. Check [[linuxcontainer.org|https://linuxcontainers.org/]].

!!! Bocker

Bocker is a container engine implemented in 100 lines of Bash code. It's mainly for education. Check [[p8952/bocker|https://github.com/p8952/bocker]].

!!! OCI

The Open Container Initiative or OCI develops specifications for standards on Operating System process and application containers. It defines two specs: the Runtime Specification ([[runtime-spec|https://github.com/opencontainers/runtime-spec]]) and the Image Specification ([[image-spec|https://github.com/opencontainers/image-spec]]). 

!! Patterns

We will demonstrate that container technology is not shiny new thing. It provides so much values by simply combining several old technologies: namespace, cgroup, and union filesystem.

!!! unshare & container

{{Container and Unshare}}

!!! nsenter & container

{{Container and Nsenter}}

!!! namespace & container

So far, we have shown how to create a new PID namespace and how to enter an existing PID namespace. It's time to figure out what is a namespace.

{{Container and Namespace}}

!!! union filesystem & container

{{Container and UnionFS}}

!!! cgroup & container

!! Conclusions

A container is merely an OS process. It runs under a namespace, requires a union filesystem and is controlled by a cgroup. That's it.

!! References

* [[What even is container|https://jvns.ca/blog/2016/10/10/what-even-is-a-container/]]
* [[Manpage: unshare|http://man7.org/linux/man-pages/man1/unshare.1.html]]
* [[Manpage: nsenter|http://man7.org/linux/man-pages/man1/nsenter.1.html]]
* [[Manpage: namespaces|http://man7.org/linux/man-pages/man7/namespaces.7.html]]
* [[Manpage: cgroup|http://man7.org/linux/man-pages/man7/cgroups.7.html]]
* [[Why do you need to run sshd in container|https://blog.docker.com/2014/06/why-you-dont-need-to-run-sshd-in-docker/]]
* [[Linux namespaces|https://medium.com/@teddyking/linux-namespaces-850489d3ccf]]
* [[Wikipedia: UnionFS|https://en.wikipedia.org/wiki/UnionFS]]
* [[Docker: about storage driver|https://docs.docker.com/storage/storagedriver/]]
